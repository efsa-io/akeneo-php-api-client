<?php
/**
 * ReferenceEntityRecordApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\AkeneoApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Akeneo PIM REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\AkeneoApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Efsa\AkeneoApi\ApiException;
use Efsa\AkeneoApi\Configuration;
use Efsa\AkeneoApi\HeaderSelector;
use Efsa\AkeneoApi\ObjectSerializer;

/**
 * ReferenceEntityRecordApi Class Doc Comment
 *
 * @category Class
 * @package  Efsa\AkeneoApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReferenceEntityRecordApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getReferenceEntityRecords
     *
     * Get the list of the records of a reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $search Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section (optional)
     * @param  string $channel Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section (optional)
     * @param  string $locales Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;/documentation/filter.html#filter-attribute-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section (optional)
     * @param  string $searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 'cursor to the first page')
     *
     * @throws \Efsa\AkeneoApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Efsa\AkeneoApi\Model\ReferenceEntityRecord|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400
     */
    public function getReferenceEntityRecords($referenceEntityCode, $search = null, $channel = null, $locales = null, $searchAfter = 'cursor to the first page')
    {
        list($response) = $this->getReferenceEntityRecordsWithHttpInfo($referenceEntityCode, $search, $channel, $locales, $searchAfter);
        return $response;
    }

    /**
     * Operation getReferenceEntityRecordsWithHttpInfo
     *
     * Get the list of the records of a reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $search Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section (optional)
     * @param  string $channel Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section (optional)
     * @param  string $locales Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;/documentation/filter.html#filter-attribute-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section (optional)
     * @param  string $searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 'cursor to the first page')
     *
     * @throws \Efsa\AkeneoApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Efsa\AkeneoApi\Model\ReferenceEntityRecord|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReferenceEntityRecordsWithHttpInfo($referenceEntityCode, $search = null, $channel = null, $locales = null, $searchAfter = 'cursor to the first page')
    {
        $request = $this->getReferenceEntityRecordsRequest($referenceEntityCode, $search, $channel, $locales, $searchAfter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Efsa\AkeneoApi\Model\ReferenceEntityRecord' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\ReferenceEntityRecord', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Efsa\AkeneoApi\Model\ReferenceEntityRecord';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\ReferenceEntityRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReferenceEntityRecordsAsync
     *
     * Get the list of the records of a reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $search Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section (optional)
     * @param  string $channel Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section (optional)
     * @param  string $locales Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;/documentation/filter.html#filter-attribute-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section (optional)
     * @param  string $searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 'cursor to the first page')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReferenceEntityRecordsAsync($referenceEntityCode, $search = null, $channel = null, $locales = null, $searchAfter = 'cursor to the first page')
    {
        return $this->getReferenceEntityRecordsAsyncWithHttpInfo($referenceEntityCode, $search, $channel, $locales, $searchAfter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReferenceEntityRecordsAsyncWithHttpInfo
     *
     * Get the list of the records of a reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $search Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section (optional)
     * @param  string $channel Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section (optional)
     * @param  string $locales Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;/documentation/filter.html#filter-attribute-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section (optional)
     * @param  string $searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 'cursor to the first page')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReferenceEntityRecordsAsyncWithHttpInfo($referenceEntityCode, $search = null, $channel = null, $locales = null, $searchAfter = 'cursor to the first page')
    {
        $returnType = '\Efsa\AkeneoApi\Model\ReferenceEntityRecord';
        $request = $this->getReferenceEntityRecordsRequest($referenceEntityCode, $search, $channel, $locales, $searchAfter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReferenceEntityRecords'
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $search Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section (optional)
     * @param  string $channel Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section (optional)
     * @param  string $locales Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;/documentation/filter.html#filter-attribute-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section (optional)
     * @param  string $searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 'cursor to the first page')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReferenceEntityRecordsRequest($referenceEntityCode, $search = null, $channel = null, $locales = null, $searchAfter = 'cursor to the first page')
    {
        // verify the required parameter 'referenceEntityCode' is set
        if ($referenceEntityCode === null || (is_array($referenceEntityCode) && count($referenceEntityCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $referenceEntityCode when calling getReferenceEntityRecords'
            );
        }

        $resourcePath = '/api/rest/v1/reference-entities/{reference_entity_code}/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($search)) {
            $search = ObjectSerializer::serializeCollection($search, '', true);
        }
        if ($search !== null) {
            $queryParams['search'] = $search;
        }
        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, '', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = $channel;
        }
        // query params
        if (is_array($locales)) {
            $locales = ObjectSerializer::serializeCollection($locales, '', true);
        }
        if ($locales !== null) {
            $queryParams['locales'] = $locales;
        }
        // query params
        if (is_array($searchAfter)) {
            $searchAfter = ObjectSerializer::serializeCollection($searchAfter, '', true);
        }
        if ($searchAfter !== null) {
            $queryParams['search_after'] = $searchAfter;
        }


        // path params
        if ($referenceEntityCode !== null) {
            $resourcePath = str_replace(
                '{' . 'reference_entity_code' . '}',
                ObjectSerializer::toPathValue($referenceEntityCode),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', '_embedded', '_links', 'code', 'message']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', '_embedded', '_links', 'code', 'message'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReferenceEntityRecordsCode
     *
     * Get a record of a given reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     *
     * @throws \Efsa\AkeneoApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Efsa\AkeneoApi\Model\InlineObject1|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400
     */
    public function getReferenceEntityRecordsCode($referenceEntityCode, $code)
    {
        list($response) = $this->getReferenceEntityRecordsCodeWithHttpInfo($referenceEntityCode, $code);
        return $response;
    }

    /**
     * Operation getReferenceEntityRecordsCodeWithHttpInfo
     *
     * Get a record of a given reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     *
     * @throws \Efsa\AkeneoApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Efsa\AkeneoApi\Model\InlineObject1|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReferenceEntityRecordsCodeWithHttpInfo($referenceEntityCode, $code)
    {
        $request = $this->getReferenceEntityRecordsCodeRequest($referenceEntityCode, $code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Efsa\AkeneoApi\Model\InlineObject1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineObject1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Efsa\AkeneoApi\Model\InlineObject1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReferenceEntityRecordsCodeAsync
     *
     * Get a record of a given reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReferenceEntityRecordsCodeAsync($referenceEntityCode, $code)
    {
        return $this->getReferenceEntityRecordsCodeAsyncWithHttpInfo($referenceEntityCode, $code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReferenceEntityRecordsCodeAsyncWithHttpInfo
     *
     * Get a record of a given reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReferenceEntityRecordsCodeAsyncWithHttpInfo($referenceEntityCode, $code)
    {
        $returnType = '\Efsa\AkeneoApi\Model\InlineObject1';
        $request = $this->getReferenceEntityRecordsCodeRequest($referenceEntityCode, $code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReferenceEntityRecordsCode'
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReferenceEntityRecordsCodeRequest($referenceEntityCode, $code)
    {
        // verify the required parameter 'referenceEntityCode' is set
        if ($referenceEntityCode === null || (is_array($referenceEntityCode) && count($referenceEntityCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $referenceEntityCode when calling getReferenceEntityRecordsCode'
            );
        }
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling getReferenceEntityRecordsCode'
            );
        }

        $resourcePath = '/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($referenceEntityCode !== null) {
            $resourcePath = str_replace(
                '{' . 'reference_entity_code' . '}',
                ObjectSerializer::toPathValue($referenceEntityCode),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'code', 'message']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'code', 'message'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchReferenceEntityRecords
     *
     * Update/create several reference entity records
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject1[] $body body (required)
     *
     * @throws \Efsa\AkeneoApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Efsa\AkeneoApi\Model\InlineResponse2003[]|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400
     */
    public function patchReferenceEntityRecords($referenceEntityCode, $body)
    {
        list($response) = $this->patchReferenceEntityRecordsWithHttpInfo($referenceEntityCode, $body);
        return $response;
    }

    /**
     * Operation patchReferenceEntityRecordsWithHttpInfo
     *
     * Update/create several reference entity records
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject1[] $body (required)
     *
     * @throws \Efsa\AkeneoApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Efsa\AkeneoApi\Model\InlineResponse2003[]|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400|\Efsa\AkeneoApi\Model\InlineResponse400, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchReferenceEntityRecordsWithHttpInfo($referenceEntityCode, $body)
    {
        $request = $this->patchReferenceEntityRecordsRequest($referenceEntityCode, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse2003[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse2003[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Efsa\AkeneoApi\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Efsa\AkeneoApi\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Efsa\AkeneoApi\Model\InlineResponse2003[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse2003[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchReferenceEntityRecordsAsync
     *
     * Update/create several reference entity records
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject1[] $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchReferenceEntityRecordsAsync($referenceEntityCode, $body)
    {
        return $this->patchReferenceEntityRecordsAsyncWithHttpInfo($referenceEntityCode, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchReferenceEntityRecordsAsyncWithHttpInfo
     *
     * Update/create several reference entity records
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject1[] $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchReferenceEntityRecordsAsyncWithHttpInfo($referenceEntityCode, $body)
    {
        $returnType = '\Efsa\AkeneoApi\Model\InlineResponse2003[]';
        $request = $this->patchReferenceEntityRecordsRequest($referenceEntityCode, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchReferenceEntityRecords'
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject1[] $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchReferenceEntityRecordsRequest($referenceEntityCode, $body)
    {
        // verify the required parameter 'referenceEntityCode' is set
        if ($referenceEntityCode === null || (is_array($referenceEntityCode) && count($referenceEntityCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $referenceEntityCode when calling patchReferenceEntityRecords'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchReferenceEntityRecords'
            );
        }

        $resourcePath = '/api/rest/v1/reference-entities/{reference_entity_code}/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($referenceEntityCode !== null) {
            $resourcePath = str_replace(
                '{' . 'reference_entity_code' . '}',
                ObjectSerializer::toPathValue($referenceEntityCode),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'code', 'message']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'code', 'message'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchReferenceEntityRecordsCode
     *
     * Update/create a record of a given reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject50 $body body (required)
     *
     * @throws \Efsa\AkeneoApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchReferenceEntityRecordsCode($referenceEntityCode, $code, $body)
    {
        $this->patchReferenceEntityRecordsCodeWithHttpInfo($referenceEntityCode, $code, $body);
    }

    /**
     * Operation patchReferenceEntityRecordsCodeWithHttpInfo
     *
     * Update/create a record of a given reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject50 $body (required)
     *
     * @throws \Efsa\AkeneoApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchReferenceEntityRecordsCodeWithHttpInfo($referenceEntityCode, $code, $body)
    {
        $request = $this->patchReferenceEntityRecordsCodeRequest($referenceEntityCode, $code, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Efsa\AkeneoApi\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchReferenceEntityRecordsCodeAsync
     *
     * Update/create a record of a given reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject50 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchReferenceEntityRecordsCodeAsync($referenceEntityCode, $code, $body)
    {
        return $this->patchReferenceEntityRecordsCodeAsyncWithHttpInfo($referenceEntityCode, $code, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchReferenceEntityRecordsCodeAsyncWithHttpInfo
     *
     * Update/create a record of a given reference entity
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject50 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchReferenceEntityRecordsCodeAsyncWithHttpInfo($referenceEntityCode, $code, $body)
    {
        $returnType = '';
        $request = $this->patchReferenceEntityRecordsCodeRequest($referenceEntityCode, $code, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchReferenceEntityRecordsCode'
     *
     * @param  string $referenceEntityCode Code of the reference entity (required)
     * @param  string $code Code of the resource (required)
     * @param  \Efsa\AkeneoApi\Model\InlineObject50 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchReferenceEntityRecordsCodeRequest($referenceEntityCode, $code, $body)
    {
        // verify the required parameter 'referenceEntityCode' is set
        if ($referenceEntityCode === null || (is_array($referenceEntityCode) && count($referenceEntityCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $referenceEntityCode when calling patchReferenceEntityRecordsCode'
            );
        }
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling patchReferenceEntityRecordsCode'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchReferenceEntityRecordsCode'
            );
        }

        $resourcePath = '/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($referenceEntityCode !== null) {
            $resourcePath = str_replace(
                '{' . 'reference_entity_code' . '}',
                ObjectSerializer::toPathValue($referenceEntityCode),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'code', 'message', '_links']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'code', 'message', '_links'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
